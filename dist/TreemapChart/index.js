import { d as _objectWithoutProperties, c as _extends } from '../chunk-c69f4c9d.js';
import React__default from 'react';
import PropTypes__default from 'prop-types';
import '../chunk-5732a1e2.js';
import { w as withTheme } from '../withTheme/index-d1a984d4.js';
import 'styled-components';
import '../chunk-69193f69.js';
import '../chunk-f27d627d.js';
import { N as NumberOrStringPT } from '../chunk-4be27f4f.js';
import { R as ReactEcharts } from '../chunk-5b9c5908.js';
import { modifyDataForChart, getRandomNumberInRange } from '../utils/index.js';

/**
 * ==================================================
 * Treemap
 * ==================================================
 */

var createChildren = function createChildren(root, level) {
  var data = [];
  var count = getRandomNumberInRange(2, 6);

  for (var i = 1; i < count; i++) {
    data.push({
      name: "Node".concat(root, ".").concat(i),
      value: getRandomNumberInRange(5, 20),
      children: level === 0 ? [] : createChildren("".concat(root, ".").concat(i), level - 1)
    });
  }

  return data;
};

var generateFakeTreemapChartData = function generateFakeTreemapChartData() {
  var levels = getRandomNumberInRange(2, 6);
  var data = [];

  for (var i = 1; i < levels; i++) {
    data.push({
      name: "Node".concat(i),
      value: getRandomNumberInRange(5, 20),
      children: createChildren(i, levels)
    });
  }

  return data;
};
var TreemapChart = withTheme(function (_ref) {
  var data = _ref.data,
      name = _ref.name,
      height = _ref.height,
      rest = _objectWithoutProperties(_ref, ["data", "name", "height"]);

  var getLevelOption = function getLevelOption() {
    return [{
      itemStyle: {
        normal: {
          borderColor: '#777',
          borderWidth: 0,
          gapWidth: 1
        }
      },
      upperLabel: {
        normal: {
          show: true
        }
      }
    }, {
      itemStyle: {
        normal: {
          borderColor: '#555',
          borderWidth: 5,
          gapWidth: 1
        },
        emphasis: {
          borderColor: '#ddd'
        }
      }
    }, {
      colorSaturation: [0.35, 0.5],
      itemStyle: {
        normal: {
          borderWidth: 5,
          gapWidth: 1,
          borderColorSaturation: 0.6
        }
      }
    }];
  };

  var option = {
    tooltip: {
      formatter: function formatter(info) {
        var value = info.value;
        var treePathInfo = info.treePathInfo;
        var treePath = [];

        for (var i = 1; i < treePathInfo.length; i++) {
          treePath.push(treePathInfo[i].name);
        }

        return ['<div class="tooltip-title">' + treePath.join('/') + '</div>', value].join('');
      }
    },
    series: [{
      name: name,
      type: 'treemap',
      visibleMin: 300,
      label: {
        show: true,
        formatter: '{b}'
      },
      upperLabel: {
        normal: {
          show: true,
          height: 30
        }
      },
      itemStyle: {
        normal: {
          borderColor: '#fff'
        }
      },
      levels: getLevelOption(),
      data: modifyDataForChart(data, false),
      roam: 'move'
    }]
  };
  return React__default.createElement(ReactEcharts, _extends({
    option: option,
    style: {
      height: height ? height : '400px',
      width: '100%'
    }
  }, rest));
});
TreemapChart.propTypes = {
  className: PropTypes__default.string,
  data: PropTypes__default.array.isRequired,
  height: NumberOrStringPT,
  name: PropTypes__default.string.isRequired,
  width: NumberOrStringPT
};
TreemapChart.defaultProps = {
  height: 400
};

export default TreemapChart;
export { TreemapChart, generateFakeTreemapChartData };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
