import { b as _objectWithoutProperties, _ as _extends } from '../chunk-d1e6a1ad.js';
import '../chunk-eda5d4be.js';
import React__default from 'react';
import PT from 'prop-types';
import '@xstyled/styled-components';
import { withTheme } from '../withTheme/index.js';
import { R as ReactEcharts } from '../chunk-995584cb.js';

/**
 * ==================================================
 * Common PropTypes
 * Other reference PropTypes: http://uber.github.io/react-vis/documentation/api-reference/xy-plot
 * ==================================================
 */

var NumberOrStringPT = PT.oneOfType([PT.number, PT.string]);
/**
 * ==================================================
 * Common getters/utils
 * ==================================================
 */

var getRandomNumberInRange = function getRandomNumberInRange() {
  var min = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
  var max = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 10;
  return Math.floor(Math.random() * max) + min;
};
/**
 * ==================================================
 * Utility functions for getting random color
 * ==================================================
 */


var colors = ['#30BC9D', '#FF9552', '#5099DE', '#EE6352', '#68CEB7', '#FFA871', '#7FB4E7', '#F28D81', '#338472', '#D17A44', '#33628E', '#A04438', '#30BC9D', '#FF9552', '#5099DE', '#EE6352', '#68CEB7', '#FFA871', '#7FB4E7', '#F28D81', '#338472', '#D17A44', '#33628E', '#A04438'];

var popRandomColor = function popRandomColor() {
  return colors[Math.floor(Math.random() * colors.length)];
};
/**
 * ==================================================
 * Sunburst
 * ==================================================
 */


var createSunburstChildren = function createSunburstChildren(root, level) {
  var data = [];
  var count = getRandomNumberInRange(1, 3);

  for (var i = 1; i < count; i++) {
    data.push({
      name: "Node".concat(i),
      value: getRandomNumberInRange(1, 5),
      children: level === 0 ? [] : createSunburstChildren("".concat(root, ".").concat(i), level - 1),
      itemStyle: {
        color: popRandomColor()
      },
      label: {
        show: false
      }
    });
  }

  return data;
};

var generateFakeSunburstChartData = function generateFakeSunburstChartData() {
  var levels = getRandomNumberInRange(2, 4);
  var data = [];

  for (var i = 1; i < levels; i++) {
    data.push({
      name: "Node".concat(i),
      value: getRandomNumberInRange(1, 5),
      children: createSunburstChildren(i, levels),
      itemStyle: {
        color: popRandomColor()
      },
      label: {
        show: false
      }
    });
  }

  return data;
};
var SunburstChart = withTheme(function (_ref) {
  var data = _ref.data,
      height = _ref.height,
      rest = _objectWithoutProperties(_ref, ["data", "height"]);

  var option = {
    series: {
      radius: ['15%', '80%'],
      type: 'sunburst',
      sort: null,
      highlightPolicy: 'ancestor',
      data: data,
      label: {
        rotate: 'radial'
      },
      levels: [],
      itemStyle: {
        color: '#ddd',
        borderWidth: 2
      }
    },
    tooltip: {
      formatter: function formatter(info) {
        return ['<div class="tooltip-title">' + info.data.name + ' : ' + info.data.value + '</div>'].join('');
      }
    }
  };
  return React__default.createElement(ReactEcharts, _extends({
    option: option,
    style: {
      height: height ? height : '400px',
      width: '100%'
    }
  }, rest));
});
SunburstChart.propTypes = {
  className: PT.string,
  data: PT.array.isRequired,
  height: NumberOrStringPT,
  width: NumberOrStringPT
};
SunburstChart.defaultProps = {
  height: 400
  /**
   * ==================================================
   * Treemap
   * ==================================================
   */

};

var createChildren = function createChildren(root, level) {
  var data = [];
  var count = getRandomNumberInRange(2, 6);

  for (var i = 1; i < count; i++) {
    data.push({
      name: "Node".concat(root, ".").concat(i),
      value: getRandomNumberInRange(5, 20),
      children: level === 0 ? [] : createChildren("".concat(root, ".").concat(i), level - 1)
    });
  }

  return data;
};

var generateFakeTreemapChartData = function generateFakeTreemapChartData() {
  var levels = getRandomNumberInRange(2, 6);
  var data = [];

  for (var i = 1; i < levels; i++) {
    data.push({
      name: "Node".concat(i),
      value: getRandomNumberInRange(5, 20),
      children: createChildren(i, levels)
    });
  }

  return data;
};
var TreemapChart = withTheme(function (_ref2) {
  var data = _ref2.data,
      name = _ref2.name,
      height = _ref2.height,
      rest = _objectWithoutProperties(_ref2, ["data", "name", "height"]);

  var getLevelOption = function getLevelOption() {
    return [{
      itemStyle: {
        normal: {
          borderColor: '#777',
          borderWidth: 0,
          gapWidth: 1
        }
      },
      upperLabel: {
        normal: {
          show: true
        }
      }
    }, {
      itemStyle: {
        normal: {
          borderColor: '#555',
          borderWidth: 5,
          gapWidth: 1
        },
        emphasis: {
          borderColor: '#ddd'
        }
      }
    }, {
      colorSaturation: [0.35, 0.5],
      itemStyle: {
        normal: {
          borderWidth: 5,
          gapWidth: 1,
          borderColorSaturation: 0.6
        }
      }
    }];
  };

  var option = {
    tooltip: {
      formatter: function formatter(info) {
        var value = info.value;
        var treePathInfo = info.treePathInfo;
        var treePath = [];

        for (var i = 1; i < treePathInfo.length; i++) {
          treePath.push(treePathInfo[i].name);
        }

        return ['<div class="tooltip-title">' + treePath.join('/') + '</div>', value].join('');
      }
    },
    series: [{
      name: name,
      type: 'treemap',
      visibleMin: 300,
      label: {
        show: true,
        formatter: '{b}'
      },

      /*upperLabel: {
        normal: {
          show: true,
          height: 30
        }
      },*/
      itemStyle: {
        normal: {
          borderColor: '#fff'
        }
      },
      levels: getLevelOption(),
      data: data
    }]
  };
  return React__default.createElement(ReactEcharts, _extends({
    option: option,
    style: {
      height: height ? height : '400px',
      width: '100%'
    }
  }, rest));
});
TreemapChart.propTypes = {
  className: PT.string,
  data: PT.array.isRequired,
  height: NumberOrStringPT,
  name: PT.string.isRequired,
  width: NumberOrStringPT
};
TreemapChart.defaultProps = {
  height: 400
  /**
   * ==================================================
   * SimpleBar
   * ==================================================
   */

};
var generateFakeSimpleBarData = function generateFakeSimpleBarData() {
  return {
    title: 'company1',
    children: [{
      title: 'AgglomerativeCluster',
      color: '#12939A',
      size: 100
    }, {
      title: 'CommunityStructure',
      color: '#12939A',
      size: 75
    }, {
      title: 'HierarchicalCluster',
      color: '#12939A',
      size: 20
    }, {
      title: 'MergeEdge',
      color: '#12939A',
      size: 10
    }, {
      title: 'BetweennessCentrality',
      color: '#12939A',
      size: 35
    }, {
      title: 'LinkDistance',
      color: '#12939A',
      size: 57
    }, {
      title: 'MaxFlowMinCut',
      color: '#12939A',
      size: 78
    }, {
      title: 'ShortestPaths',
      color: '#12939A',
      size: 59
    }, {
      title: 'SpanningTree',
      color: '#12939A',
      size: 16
    }]
  };
};
var SimpleBar = withTheme(function (_ref3) {
  var data = _ref3.data;
  return React__default.createElement("div", {
    style: {
      maxWidth: 300,
      maxHeight: 300,
      overflow: 'auto'
    }
  }, data.children.map(function (child) {
    return React__default.createElement("div", {
      style: {
        margin: '10px'
      }
    }, React__default.createElement("div", {
      style: {
        width: "".concat(child.size, "%"),
        background: 'linear-gradient(56deg, rgba(80,153,222,0.73) 0%, rgba(80,153,222,0.37) 57%, rgba(80,153,222,0.11) 100%)',
        padding: '3px 5px'
      }
    }, child.title));
  }));
});
SimpleBar.propTypes = {
  data: PT.object.isRequired
  /**
   * ==================================================
   * StackedBarChart
   * ==================================================
   */

};
var generateFakeStackedBarChartData = function generateFakeStackedBarChartData() {
  return [['Category', '2015', '2016', '2017', '2018', '2019'], ['Matcha Latte', 43.3, 85.8, 93.7, 32.4, 10.2], ['Milk Tea', 83.1, 73.4, 55.1, 23.4, 8.8], ['Cheese Cocoa', 86.4, 65.2, 82.5, 15.3, 15.2], ['Walnut Brownie', 72.4, 53.9, 39.1, 42.1, 13.3]];
};
var StackedBarChart = withTheme(function (_ref4) {
  var data = _ref4.data,
      height = _ref4.height,
      rest = _objectWithoutProperties(_ref4, ["data", "height"]);

  var option = {
    legend: {},
    tooltip: {
      trigger: 'axis',
      axisPointer: {
        type: 'shadow'
      }
    },
    grid: {
      left: '3%',
      right: '4%',
      bottom: '3%',
      containLabel: true
    },
    dataset: {
      source: data
    },
    xAxis: {
      type: 'value'
    },
    yAxis: {
      type: 'category'
    },
    series: data && data[0].map(function (_, index) {
      if (index !== 0) {
        return {
          type: 'bar',
          stack: 'sample',
          label: {
            normal: {
              show: true,
              position: 'insideRight'
            }
          }
        };
      }
    })
  };
  return React__default.createElement(ReactEcharts, _extends({
    option: option,
    style: {
      height: height ? height : '400px',
      width: '100%'
    }
  }, rest));
});
StackedBarChart.propTypes = {
  className: PT.string,
  data: PT.array.isRequired,
  height: NumberOrStringPT
};
StackedBarChart.defaultProps = {
  height: 400
};
var index = {
  StackedBarChart: StackedBarChart,
  SimpleBar: SimpleBar
};

export default index;
export { SimpleBar, StackedBarChart, SunburstChart, TreemapChart, generateFakeSimpleBarData, generateFakeStackedBarChartData, generateFakeSunburstChartData, generateFakeTreemapChartData };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
