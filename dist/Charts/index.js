import { d as _objectWithoutProperties, c as _extends } from '../chunk-c69f4c9d.js';
import React__default from 'react';
import PropTypes__default from 'prop-types';
import '../chunk-5732a1e2.js';
import { w as withTheme } from '../withTheme/index-d1a984d4.js';
import 'styled-components';
import '../chunk-69193f69.js';
import '../chunk-f27d627d.js';
import { R as ReactEcharts } from '../chunk-5b9c5908.js';

/**
 * ==================================================
 * Common PropTypes
 * Other reference PropTypes: http://uber.github.io/react-vis/documentation/api-reference/xy-plot
 * ==================================================
 */

var NumberOrStringPT = PropTypes__default.oneOfType([PropTypes__default.number, PropTypes__default.string]);
/**
 * ==================================================
 * Common getters/utils
 * ==================================================
 */

var getRandomNumberInRange = function getRandomNumberInRange() {
  var min = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
  var max = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 10;
  return Math.floor(Math.random() * max) + min;
};
/**
 * ==================================================
 * Utility functions for getting random color
 * ==================================================
 */


var colors = ['#30BC9D', '#FF9552', '#5099DE', '#EE6352', '#68CEB7', '#FFA871', '#7FB4E7', '#F28D81', '#338472', '#D17A44', '#33628E', '#A04438', '#30BC9D', '#FF9552', '#5099DE', '#EE6352', '#68CEB7', '#FFA871', '#7FB4E7', '#F28D81', '#338472', '#D17A44', '#33628E', '#A04438'];

var popRandomColor = function popRandomColor() {
  return colors[Math.floor(Math.random() * colors.length)];
};

var colorIndex = 0;

var modifyDataForChart = function modifyDataForChart(data, addColor) {
  if (data && !!data.length) {
    var modifiedData = data.map(function (obj) {
      if (addColor) {
        obj.itemStyle = {
          color: colors[colorIndex++]
        };
        if (colorIndex >= colors.length) colorIndex = 0;
      }

      if (obj.title) {
        obj.name = obj.title;
        delete obj.title;
      }

      if (obj.children && !!obj.children.length) {
        obj.children = modifyDataForChart(obj.children, addColor);
      }

      return obj;
    });
    return modifiedData;
  } else {
    return data;
  }
};
/**
 * ==================================================
 * Sunburst
 * ==================================================
 */


var createSunburstChildren = function createSunburstChildren(root, level) {
  var data = [];
  var count = getRandomNumberInRange(1, 3);

  for (var i = 1; i < count; i++) {
    data.push({
      name: "Node".concat(i),
      value: getRandomNumberInRange(1, 5),
      children: level === 0 ? [] : createSunburstChildren("".concat(root, ".").concat(i), level - 1),
      itemStyle: {
        color: popRandomColor()
      },
      label: {
        show: false
      }
    });
  }

  return data;
};

var generateFakeSunburstChartData = function generateFakeSunburstChartData() {
  var levels = getRandomNumberInRange(2, 4);
  var data = [];

  for (var i = 1; i < levels; i++) {
    data.push({
      name: "Node".concat(i),
      value: getRandomNumberInRange(1, 5),
      children: createSunburstChildren(i, levels),
      itemStyle: {
        color: popRandomColor()
      },
      label: {
        show: false
      }
    });
  }

  return data;
};
var SunburstChart = withTheme(function (_ref) {
  var data = _ref.data,
      name = _ref.name,
      height = _ref.height,
      rest = _objectWithoutProperties(_ref, ["data", "name", "height"]);

  var option = {
    series: {
      name: name,
      radius: ['15%', '80%'],
      type: 'sunburst',
      sort: null,
      highlightPolicy: 'ancestor',
      data: modifyDataForChart(data, true),
      label: {
        show: false
      },
      levels: [],
      itemStyle: {
        color: '#ddd',
        borderWidth: 2
      }
    },
    tooltip: {
      formatter: function formatter(info) {
        return ['<div class="tooltip-title">' + info.data.name + ' : ' + info.data.value + '</div>'].join('');
      }
    }
  };
  return React__default.createElement(ReactEcharts, _extends({
    option: option,
    style: {
      height: height || '400px',
      width: '100%'
    }
  }, rest));
});
SunburstChart.propTypes = {
  className: PropTypes__default.string,
  data: PropTypes__default.array.isRequired,
  height: NumberOrStringPT,
  width: NumberOrStringPT
};
SunburstChart.defaultProps = {
  height: 400
  /**
   * ==================================================
   * Treemap
   * ==================================================
   */

};

var createChildren = function createChildren(root, level) {
  var data = [];
  var count = getRandomNumberInRange(2, 6);

  for (var i = 1; i < count; i++) {
    data.push({
      name: "Node".concat(root, ".").concat(i),
      value: getRandomNumberInRange(5, 20),
      children: level === 0 ? [] : createChildren("".concat(root, ".").concat(i), level - 1)
    });
  }

  return data;
};

var generateFakeTreemapChartData = function generateFakeTreemapChartData() {
  var levels = getRandomNumberInRange(2, 6);
  var data = [];

  for (var i = 1; i < levels; i++) {
    data.push({
      name: "Node".concat(i),
      value: getRandomNumberInRange(5, 20),
      children: createChildren(i, levels)
    });
  }

  return data;
};
var TreemapChart = withTheme(function (_ref2) {
  var data = _ref2.data,
      name = _ref2.name,
      height = _ref2.height,
      rest = _objectWithoutProperties(_ref2, ["data", "name", "height"]);

  var getLevelOption = function getLevelOption() {
    return [{
      itemStyle: {
        normal: {
          borderColor: '#777',
          borderWidth: 0,
          gapWidth: 1
        }
      },
      upperLabel: {
        normal: {
          show: true
        }
      }
    }, {
      itemStyle: {
        normal: {
          borderColor: '#555',
          borderWidth: 5,
          gapWidth: 1
        },
        emphasis: {
          borderColor: '#ddd'
        }
      }
    }, {
      colorSaturation: [0.35, 0.5],
      itemStyle: {
        normal: {
          borderWidth: 5,
          gapWidth: 1,
          borderColorSaturation: 0.6
        }
      }
    }];
  };

  var option = {
    tooltip: {
      formatter: function formatter(info) {
        var value = info.value;
        var treePathInfo = info.treePathInfo;
        var treePath = [];

        for (var i = 1; i < treePathInfo.length; i++) {
          treePath.push(treePathInfo[i].name);
        }

        return ['<div class="tooltip-title">' + treePath.join('/') + '</div>', value].join('');
      }
    },
    series: [{
      name: name,
      type: 'treemap',
      visibleMin: 300,
      label: {
        show: true,
        formatter: '{b}'
      },
      upperLabel: {
        normal: {
          show: true,
          height: 30
        }
      },
      itemStyle: {
        normal: {
          borderColor: '#fff'
        }
      },
      levels: getLevelOption(),
      data: modifyDataForChart(data, false),
      roam: 'move'
    }]
  };
  return React__default.createElement(ReactEcharts, _extends({
    option: option,
    style: {
      height: height || '400px',
      width: '100%'
    }
  }, rest));
});
TreemapChart.propTypes = {
  className: PropTypes__default.string,
  data: PropTypes__default.array.isRequired,
  height: NumberOrStringPT,
  name: PropTypes__default.string.isRequired,
  width: NumberOrStringPT
};
TreemapChart.defaultProps = {
  height: 400
  /**
   * ==================================================
   * SimpleBar
   * ==================================================
   */

};
var generateFakeSimpleBarData = function generateFakeSimpleBarData() {
  return {
    title: 'company1',
    children: [{
      name: 'Agglomerative Cluster',
      color: '#12939A',
      value: 100
    }, {
      name: 'Community Structure',
      color: '#12939A',
      value: 75
    }, {
      name: 'Hierarchical Cluster',
      color: '#12939A',
      value: 20
    }, {
      name: 'Merge Edge',
      color: '#12939A',
      value: 10
    }, {
      name: 'Betweenness Centrality',
      color: '#12939A',
      value: 35
    }, {
      name: 'Link Distance',
      color: '#12939A',
      value: 57
    }, {
      name: 'MaxFlowMinCut',
      color: '#12939A',
      value: 78
    }, {
      name: 'Shortest Paths',
      color: '#12939A',
      value: 59
    }, {
      name: 'SpanningTree',
      color: '#12939A',
      value: 16
    }]
  };
};
var SimpleBar = withTheme(function (_ref3) {
  var data = _ref3.data;
  return React__default.createElement("div", {
    style: {
      maxWidth: 300,
      maxHeight: 300,
      overflow: 'auto',
      margin: '0 auto'
    }
  }, data.children.map(function (child) {
    return React__default.createElement("div", {
      style: {
        margin: '10px',
        whiteSpace: 'nowrap'
      }
    }, React__default.createElement("div", {
      style: {
        width: "".concat(child.value, "%"),
        background: 'linear-gradient(56deg, rgba(80,153,222,0.73) 0%, rgba(80,153,222,0.37) 57%, rgba(80,153,222,0.11) 100%)',
        padding: '3px 5px'
      }
    }, child.name));
  }));
});
SimpleBar.propTypes = {
  data: PropTypes__default.object.isRequired
  /**
   * ==================================================
   * StackedBarChart
   * ==================================================
   */

};
var generateFakeStackedBarChartData = function generateFakeStackedBarChartData() {
  return [['Category', '2015', '2016', '2017', '2018', '2019'], ['Matcha Latte', 43.3, 85.8, 93.7, 32.4, 10.2], ['Milk Tea', 83.1, 73.4, 55.1, 23.4, 8.8], ['Cheese Cocoa', 86.4, 65.2, 82.5, 15.3, 15.2], ['Walnut Brownie', 72.4, 53.9, 39.1, 42.1, 13.3]];
};
var StackedBarChart = withTheme(function (_ref4) {
  var data = _ref4.data,
      height = _ref4.height,
      rest = _objectWithoutProperties(_ref4, ["data", "height"]);

  var option = {
    legend: {},
    tooltip: {
      trigger: 'axis',
      axisPointer: {
        type: 'shadow'
      }
    },
    grid: {
      left: '3%',
      right: '4%',
      bottom: '3%',
      containLabel: true
    },
    dataset: {
      source: data
    },
    xAxis: {
      type: 'value'
    },
    yAxis: {
      type: 'category'
    },
    series: data && data[0].map(function (_, index) {
      if (index !== 0) {
        return {
          type: 'bar',
          stack: 'sample',
          label: {
            normal: {
              show: true,
              position: 'insideRight'
            }
          }
        };
      }
    })
  };
  return React__default.createElement(ReactEcharts, _extends({
    option: option,
    style: {
      height: height || '400px',
      width: '100%'
    }
  }, rest));
});
StackedBarChart.propTypes = {
  className: PropTypes__default.string,
  data: PropTypes__default.array.isRequired,
  height: NumberOrStringPT
};
StackedBarChart.defaultProps = {
  height: 400
};
var index = {
  StackedBarChart: StackedBarChart,
  SimpleBar: SimpleBar
};

export default index;
export { SimpleBar, StackedBarChart, SunburstChart, TreemapChart, generateFakeSimpleBarData, generateFakeStackedBarChartData, generateFakeSunburstChartData, generateFakeTreemapChartData };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9DaGFydHMvaW5kZXguanMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBUaGlzIGZpbGUgaG91c2VzIGFsbCBjdXN0b20gY2hhcnRzIHdoaWNoIHNob3VsZCBiZSByZXVzYWJsZSBtb2xlY3VsZXNcbiAqL1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0J1xuaW1wb3J0IFBUIGZyb20gJ3Byb3AtdHlwZXMnXG5pbXBvcnQgUmVhY3RFY2hhcnRzIGZyb20gJ2VjaGFydHMtZm9yLXJlYWN0J1xuaW1wb3J0IHdpdGhUaGVtZSBmcm9tICcuLi93aXRoVGhlbWUnXG5cbi8qKlxuICogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAqIENvbW1vbiBQcm9wVHlwZXNcbiAqIE90aGVyIHJlZmVyZW5jZSBQcm9wVHlwZXM6IGh0dHA6Ly91YmVyLmdpdGh1Yi5pby9yZWFjdC12aXMvZG9jdW1lbnRhdGlvbi9hcGktcmVmZXJlbmNlL3h5LXBsb3RcbiAqID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gKi9cbmNvbnN0IE51bWJlck9yU3RyaW5nUFQgPSBQVC5vbmVPZlR5cGUoW1BULm51bWJlciwgUFQuc3RyaW5nXSlcblxuLyoqXG4gKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICogQ29tbW9uIGdldHRlcnMvdXRpbHNcbiAqID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gKi9cbmNvbnN0IGdldFJhbmRvbU51bWJlckluUmFuZ2UgPSAobWluID0gMCwgbWF4ID0gMTApID0+XG4gIE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIG1heCkgKyBtaW5cblxuLyoqXG4gKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICogVXRpbGl0eSBmdW5jdGlvbnMgZm9yIGdldHRpbmcgcmFuZG9tIGNvbG9yXG4gKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICovXG5jb25zdCBjb2xvcnMgPSBbXG4gICcjMzBCQzlEJyxcbiAgJyNGRjk1NTInLFxuICAnIzUwOTlERScsXG4gICcjRUU2MzUyJyxcbiAgJyM2OENFQjcnLFxuICAnI0ZGQTg3MScsXG4gICcjN0ZCNEU3JyxcbiAgJyNGMjhEODEnLFxuICAnIzMzODQ3MicsXG4gICcjRDE3QTQ0JyxcbiAgJyMzMzYyOEUnLFxuICAnI0EwNDQzOCcsXG4gICcjMzBCQzlEJyxcbiAgJyNGRjk1NTInLFxuICAnIzUwOTlERScsXG4gICcjRUU2MzUyJyxcbiAgJyM2OENFQjcnLFxuICAnI0ZGQTg3MScsXG4gICcjN0ZCNEU3JyxcbiAgJyNGMjhEODEnLFxuICAnIzMzODQ3MicsXG4gICcjRDE3QTQ0JyxcbiAgJyMzMzYyOEUnLFxuICAnI0EwNDQzOCdcbl1cbmNvbnN0IHBvcFJhbmRvbUNvbG9yID0gKCkgPT4gY29sb3JzW01hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIGNvbG9ycy5sZW5ndGgpXVxubGV0IGNvbG9ySW5kZXggPSAwXG5cbmNvbnN0IG1vZGlmeURhdGFGb3JDaGFydCA9IChkYXRhLCBhZGRDb2xvcikgPT4ge1xuICBpZiAoZGF0YSAmJiAhIWRhdGEubGVuZ3RoKSB7XG4gICAgY29uc3QgbW9kaWZpZWREYXRhID0gZGF0YS5tYXAob2JqID0+IHtcbiAgICAgIGlmIChhZGRDb2xvcikge1xuICAgICAgICBvYmouaXRlbVN0eWxlID0geyBjb2xvcjogY29sb3JzW2NvbG9ySW5kZXgrK10gfVxuICAgICAgICBpZiAoY29sb3JJbmRleCA+PSBjb2xvcnMubGVuZ3RoKSBjb2xvckluZGV4ID0gMFxuICAgICAgfVxuICAgICAgaWYgKG9iai50aXRsZSkge1xuICAgICAgICBvYmoubmFtZSA9IG9iai50aXRsZVxuICAgICAgICBkZWxldGUgb2JqLnRpdGxlXG4gICAgICB9XG4gICAgICBpZiAob2JqLmNoaWxkcmVuICYmICEhb2JqLmNoaWxkcmVuLmxlbmd0aCkge1xuICAgICAgICBvYmouY2hpbGRyZW4gPSBtb2RpZnlEYXRhRm9yQ2hhcnQob2JqLmNoaWxkcmVuLCBhZGRDb2xvcilcbiAgICAgIH1cbiAgICAgIHJldHVybiBvYmpcbiAgICB9KVxuXG4gICAgcmV0dXJuIG1vZGlmaWVkRGF0YVxuICB9IGVsc2Uge1xuICAgIHJldHVybiBkYXRhXG4gIH1cbn1cblxuLyoqXG4gKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICogU3VuYnVyc3RcbiAqID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gKi9cbmNvbnN0IGNyZWF0ZVN1bmJ1cnN0Q2hpbGRyZW4gPSAocm9vdCwgbGV2ZWwpID0+IHtcbiAgY29uc3QgZGF0YSA9IFtdXG4gIGNvbnN0IGNvdW50ID0gZ2V0UmFuZG9tTnVtYmVySW5SYW5nZSgxLCAzKVxuICBmb3IgKGxldCBpID0gMTsgaSA8IGNvdW50OyBpKyspIHtcbiAgICBkYXRhLnB1c2goe1xuICAgICAgbmFtZTogYE5vZGUke2l9YCxcbiAgICAgIHZhbHVlOiBnZXRSYW5kb21OdW1iZXJJblJhbmdlKDEsIDUpLFxuICAgICAgY2hpbGRyZW46XG4gICAgICAgIGxldmVsID09PSAwID8gW10gOiBjcmVhdGVTdW5idXJzdENoaWxkcmVuKGAke3Jvb3R9LiR7aX1gLCBsZXZlbCAtIDEpLFxuICAgICAgaXRlbVN0eWxlOiB7IGNvbG9yOiBwb3BSYW5kb21Db2xvcigpIH0sXG4gICAgICBsYWJlbDogeyBzaG93OiBmYWxzZSB9XG4gICAgfSlcbiAgfVxuICByZXR1cm4gZGF0YVxufVxuXG5leHBvcnQgY29uc3QgZ2VuZXJhdGVGYWtlU3VuYnVyc3RDaGFydERhdGEgPSAoKSA9PiB7XG4gIGNvbnN0IGxldmVscyA9IGdldFJhbmRvbU51bWJlckluUmFuZ2UoMiwgNClcbiAgY29uc3QgZGF0YSA9IFtdXG5cbiAgZm9yIChsZXQgaSA9IDE7IGkgPCBsZXZlbHM7IGkrKykge1xuICAgIGRhdGEucHVzaCh7XG4gICAgICBuYW1lOiBgTm9kZSR7aX1gLFxuICAgICAgdmFsdWU6IGdldFJhbmRvbU51bWJlckluUmFuZ2UoMSwgNSksXG4gICAgICBjaGlsZHJlbjogY3JlYXRlU3VuYnVyc3RDaGlsZHJlbihpLCBsZXZlbHMpLFxuICAgICAgaXRlbVN0eWxlOiB7IGNvbG9yOiBwb3BSYW5kb21Db2xvcigpIH0sXG4gICAgICBsYWJlbDogeyBzaG93OiBmYWxzZSB9XG4gICAgfSlcbiAgfVxuXG4gIHJldHVybiBkYXRhXG59XG5cbmV4cG9ydCBjb25zdCBTdW5idXJzdENoYXJ0ID0gd2l0aFRoZW1lKCh7IGRhdGEsIG5hbWUsIGhlaWdodCwgLi4ucmVzdCB9KSA9PiB7XG4gIGNvbnN0IG9wdGlvbiA9IHtcbiAgICBzZXJpZXM6IHtcbiAgICAgIG5hbWUsXG4gICAgICByYWRpdXM6IFsnMTUlJywgJzgwJSddLFxuICAgICAgdHlwZTogJ3N1bmJ1cnN0JyxcbiAgICAgIHNvcnQ6IG51bGwsXG4gICAgICBoaWdobGlnaHRQb2xpY3k6ICdhbmNlc3RvcicsXG4gICAgICBkYXRhOiBtb2RpZnlEYXRhRm9yQ2hhcnQoZGF0YSwgdHJ1ZSksXG4gICAgICBsYWJlbDoge1xuICAgICAgICBzaG93OiBmYWxzZVxuICAgICAgfSxcbiAgICAgIGxldmVsczogW10sXG4gICAgICBpdGVtU3R5bGU6IHtcbiAgICAgICAgY29sb3I6ICcjZGRkJyxcbiAgICAgICAgYm9yZGVyV2lkdGg6IDJcbiAgICAgIH1cbiAgICB9LFxuICAgIHRvb2x0aXA6IHtcbiAgICAgIGZvcm1hdHRlcjogZnVuY3Rpb24oaW5mbykge1xuICAgICAgICByZXR1cm4gW1xuICAgICAgICAgICc8ZGl2IGNsYXNzPVwidG9vbHRpcC10aXRsZVwiPicgK1xuICAgICAgICAgICAgaW5mby5kYXRhLm5hbWUgK1xuICAgICAgICAgICAgJyA6ICcgK1xuICAgICAgICAgICAgaW5mby5kYXRhLnZhbHVlICtcbiAgICAgICAgICAgICc8L2Rpdj4nXG4gICAgICAgIF0uam9pbignJylcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gKFxuICAgIDxSZWFjdEVjaGFydHNcbiAgICAgIG9wdGlvbj17b3B0aW9ufVxuICAgICAgc3R5bGU9e3sgaGVpZ2h0OiBoZWlnaHQgfHwgJzQwMHB4Jywgd2lkdGg6ICcxMDAlJyB9fVxuICAgICAgey4uLnJlc3R9XG4gICAgLz5cbiAgKVxufSlcblxuU3VuYnVyc3RDaGFydC5wcm9wVHlwZXMgPSB7XG4gIGNsYXNzTmFtZTogUFQuc3RyaW5nLFxuICBkYXRhOiBQVC5hcnJheS5pc1JlcXVpcmVkLFxuICBoZWlnaHQ6IE51bWJlck9yU3RyaW5nUFQsXG4gIHdpZHRoOiBOdW1iZXJPclN0cmluZ1BUXG59XG5cblN1bmJ1cnN0Q2hhcnQuZGVmYXVsdFByb3BzID0ge1xuICBoZWlnaHQ6IDQwMFxufVxuXG4vKipcbiAqID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gKiBUcmVlbWFwXG4gKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICovXG5jb25zdCBjcmVhdGVDaGlsZHJlbiA9IChyb290LCBsZXZlbCkgPT4ge1xuICBjb25zdCBkYXRhID0gW11cbiAgY29uc3QgY291bnQgPSBnZXRSYW5kb21OdW1iZXJJblJhbmdlKDIsIDYpXG4gIGZvciAobGV0IGkgPSAxOyBpIDwgY291bnQ7IGkrKykge1xuICAgIGRhdGEucHVzaCh7XG4gICAgICBuYW1lOiBgTm9kZSR7cm9vdH0uJHtpfWAsXG4gICAgICB2YWx1ZTogZ2V0UmFuZG9tTnVtYmVySW5SYW5nZSg1LCAyMCksXG4gICAgICBjaGlsZHJlbjogbGV2ZWwgPT09IDAgPyBbXSA6IGNyZWF0ZUNoaWxkcmVuKGAke3Jvb3R9LiR7aX1gLCBsZXZlbCAtIDEpXG4gICAgfSlcbiAgfVxuICByZXR1cm4gZGF0YVxufVxuXG5leHBvcnQgY29uc3QgZ2VuZXJhdGVGYWtlVHJlZW1hcENoYXJ0RGF0YSA9ICgpID0+IHtcbiAgY29uc3QgbGV2ZWxzID0gZ2V0UmFuZG9tTnVtYmVySW5SYW5nZSgyLCA2KVxuICBjb25zdCBkYXRhID0gW11cblxuICBmb3IgKGxldCBpID0gMTsgaSA8IGxldmVsczsgaSsrKSB7XG4gICAgZGF0YS5wdXNoKHtcbiAgICAgIG5hbWU6IGBOb2RlJHtpfWAsXG4gICAgICB2YWx1ZTogZ2V0UmFuZG9tTnVtYmVySW5SYW5nZSg1LCAyMCksXG4gICAgICBjaGlsZHJlbjogY3JlYXRlQ2hpbGRyZW4oaSwgbGV2ZWxzKVxuICAgIH0pXG4gIH1cblxuICByZXR1cm4gZGF0YVxufVxuXG5leHBvcnQgY29uc3QgVHJlZW1hcENoYXJ0ID0gd2l0aFRoZW1lKCh7IGRhdGEsIG5hbWUsIGhlaWdodCwgLi4ucmVzdCB9KSA9PiB7XG4gIGNvbnN0IGdldExldmVsT3B0aW9uID0gKCkgPT4ge1xuICAgIHJldHVybiBbXG4gICAgICB7XG4gICAgICAgIGl0ZW1TdHlsZToge1xuICAgICAgICAgIG5vcm1hbDoge1xuICAgICAgICAgICAgYm9yZGVyQ29sb3I6ICcjNzc3JyxcbiAgICAgICAgICAgIGJvcmRlcldpZHRoOiAwLFxuICAgICAgICAgICAgZ2FwV2lkdGg6IDFcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHVwcGVyTGFiZWw6IHtcbiAgICAgICAgICBub3JtYWw6IHtcbiAgICAgICAgICAgIHNob3c6IHRydWVcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGl0ZW1TdHlsZToge1xuICAgICAgICAgIG5vcm1hbDoge1xuICAgICAgICAgICAgYm9yZGVyQ29sb3I6ICcjNTU1JyxcbiAgICAgICAgICAgIGJvcmRlcldpZHRoOiA1LFxuICAgICAgICAgICAgZ2FwV2lkdGg6IDFcbiAgICAgICAgICB9LFxuICAgICAgICAgIGVtcGhhc2lzOiB7XG4gICAgICAgICAgICBib3JkZXJDb2xvcjogJyNkZGQnXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBjb2xvclNhdHVyYXRpb246IFswLjM1LCAwLjVdLFxuICAgICAgICBpdGVtU3R5bGU6IHtcbiAgICAgICAgICBub3JtYWw6IHtcbiAgICAgICAgICAgIGJvcmRlcldpZHRoOiA1LFxuICAgICAgICAgICAgZ2FwV2lkdGg6IDEsXG4gICAgICAgICAgICBib3JkZXJDb2xvclNhdHVyYXRpb246IDAuNlxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIF1cbiAgfVxuICBjb25zdCBvcHRpb24gPSB7XG4gICAgdG9vbHRpcDoge1xuICAgICAgZm9ybWF0dGVyOiBmdW5jdGlvbihpbmZvKSB7XG4gICAgICAgIGNvbnN0IHZhbHVlID0gaW5mby52YWx1ZVxuICAgICAgICBjb25zdCB0cmVlUGF0aEluZm8gPSBpbmZvLnRyZWVQYXRoSW5mb1xuICAgICAgICBjb25zdCB0cmVlUGF0aCA9IFtdXG5cbiAgICAgICAgZm9yIChsZXQgaSA9IDE7IGkgPCB0cmVlUGF0aEluZm8ubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICB0cmVlUGF0aC5wdXNoKHRyZWVQYXRoSW5mb1tpXS5uYW1lKVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIFtcbiAgICAgICAgICAnPGRpdiBjbGFzcz1cInRvb2x0aXAtdGl0bGVcIj4nICsgdHJlZVBhdGguam9pbignLycpICsgJzwvZGl2PicsXG4gICAgICAgICAgdmFsdWVcbiAgICAgICAgXS5qb2luKCcnKVxuICAgICAgfVxuICAgIH0sXG4gICAgc2VyaWVzOiBbXG4gICAgICB7XG4gICAgICAgIG5hbWUsXG4gICAgICAgIHR5cGU6ICd0cmVlbWFwJyxcbiAgICAgICAgdmlzaWJsZU1pbjogMzAwLFxuICAgICAgICBsYWJlbDoge1xuICAgICAgICAgIHNob3c6IHRydWUsXG4gICAgICAgICAgZm9ybWF0dGVyOiAne2J9J1xuICAgICAgICB9LFxuICAgICAgICB1cHBlckxhYmVsOiB7XG4gICAgICAgICAgbm9ybWFsOiB7XG4gICAgICAgICAgICBzaG93OiB0cnVlLFxuICAgICAgICAgICAgaGVpZ2h0OiAzMFxuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgaXRlbVN0eWxlOiB7XG4gICAgICAgICAgbm9ybWFsOiB7XG4gICAgICAgICAgICBib3JkZXJDb2xvcjogJyNmZmYnXG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBsZXZlbHM6IGdldExldmVsT3B0aW9uKCksXG4gICAgICAgIGRhdGE6IG1vZGlmeURhdGFGb3JDaGFydChkYXRhLCBmYWxzZSksXG4gICAgICAgIHJvYW06ICdtb3ZlJ1xuICAgICAgfVxuICAgIF1cbiAgfVxuXG4gIHJldHVybiAoXG4gICAgPFJlYWN0RWNoYXJ0c1xuICAgICAgb3B0aW9uPXtvcHRpb259XG4gICAgICBzdHlsZT17eyBoZWlnaHQ6IGhlaWdodCB8fCAnNDAwcHgnLCB3aWR0aDogJzEwMCUnIH19XG4gICAgICB7Li4ucmVzdH1cbiAgICAvPlxuICApXG59KVxuXG5UcmVlbWFwQ2hhcnQucHJvcFR5cGVzID0ge1xuICBjbGFzc05hbWU6IFBULnN0cmluZyxcbiAgZGF0YTogUFQuYXJyYXkuaXNSZXF1aXJlZCxcbiAgaGVpZ2h0OiBOdW1iZXJPclN0cmluZ1BULFxuICBuYW1lOiBQVC5zdHJpbmcuaXNSZXF1aXJlZCxcbiAgd2lkdGg6IE51bWJlck9yU3RyaW5nUFRcbn1cblxuVHJlZW1hcENoYXJ0LmRlZmF1bHRQcm9wcyA9IHtcbiAgaGVpZ2h0OiA0MDBcbn1cblxuLyoqXG4gKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICogU2ltcGxlQmFyXG4gKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICovXG5leHBvcnQgY29uc3QgZ2VuZXJhdGVGYWtlU2ltcGxlQmFyRGF0YSA9ICgpID0+IHtcbiAgcmV0dXJuIHtcbiAgICB0aXRsZTogJ2NvbXBhbnkxJyxcbiAgICBjaGlsZHJlbjogW1xuICAgICAgeyBuYW1lOiAnQWdnbG9tZXJhdGl2ZSBDbHVzdGVyJywgY29sb3I6ICcjMTI5MzlBJywgdmFsdWU6IDEwMCB9LFxuICAgICAgeyBuYW1lOiAnQ29tbXVuaXR5IFN0cnVjdHVyZScsIGNvbG9yOiAnIzEyOTM5QScsIHZhbHVlOiA3NSB9LFxuICAgICAgeyBuYW1lOiAnSGllcmFyY2hpY2FsIENsdXN0ZXInLCBjb2xvcjogJyMxMjkzOUEnLCB2YWx1ZTogMjAgfSxcbiAgICAgIHsgbmFtZTogJ01lcmdlIEVkZ2UnLCBjb2xvcjogJyMxMjkzOUEnLCB2YWx1ZTogMTAgfSxcbiAgICAgIHsgbmFtZTogJ0JldHdlZW5uZXNzIENlbnRyYWxpdHknLCBjb2xvcjogJyMxMjkzOUEnLCB2YWx1ZTogMzUgfSxcbiAgICAgIHsgbmFtZTogJ0xpbmsgRGlzdGFuY2UnLCBjb2xvcjogJyMxMjkzOUEnLCB2YWx1ZTogNTcgfSxcbiAgICAgIHsgbmFtZTogJ01heEZsb3dNaW5DdXQnLCBjb2xvcjogJyMxMjkzOUEnLCB2YWx1ZTogNzggfSxcbiAgICAgIHsgbmFtZTogJ1Nob3J0ZXN0IFBhdGhzJywgY29sb3I6ICcjMTI5MzlBJywgdmFsdWU6IDU5IH0sXG4gICAgICB7IG5hbWU6ICdTcGFubmluZ1RyZWUnLCBjb2xvcjogJyMxMjkzOUEnLCB2YWx1ZTogMTYgfVxuICAgIF1cbiAgfVxufVxuXG5leHBvcnQgY29uc3QgU2ltcGxlQmFyID0gd2l0aFRoZW1lKCh7IGRhdGEgfSkgPT4ge1xuICByZXR1cm4gKFxuICAgIDxkaXZcbiAgICAgIHN0eWxlPXt7XG4gICAgICAgIG1heFdpZHRoOiAzMDAsXG4gICAgICAgIG1heEhlaWdodDogMzAwLFxuICAgICAgICBvdmVyZmxvdzogJ2F1dG8nLFxuICAgICAgICBtYXJnaW46ICcwIGF1dG8nXG4gICAgICB9fVxuICAgID5cbiAgICAgIHtkYXRhLmNoaWxkcmVuLm1hcChjaGlsZCA9PiAoXG4gICAgICAgIDxkaXYgc3R5bGU9e3sgbWFyZ2luOiAnMTBweCcsIHdoaXRlU3BhY2U6ICdub3dyYXAnIH19PlxuICAgICAgICAgIDxkaXZcbiAgICAgICAgICAgIHN0eWxlPXt7XG4gICAgICAgICAgICAgIHdpZHRoOiBgJHtjaGlsZC52YWx1ZX0lYCxcbiAgICAgICAgICAgICAgYmFja2dyb3VuZDpcbiAgICAgICAgICAgICAgICAnbGluZWFyLWdyYWRpZW50KDU2ZGVnLCByZ2JhKDgwLDE1MywyMjIsMC43MykgMCUsIHJnYmEoODAsMTUzLDIyMiwwLjM3KSA1NyUsIHJnYmEoODAsMTUzLDIyMiwwLjExKSAxMDAlKScsXG4gICAgICAgICAgICAgIHBhZGRpbmc6ICczcHggNXB4J1xuICAgICAgICAgICAgfX1cbiAgICAgICAgICA+XG4gICAgICAgICAgICB7Y2hpbGQubmFtZX1cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9kaXY+XG4gICAgICApKX1cbiAgICA8L2Rpdj5cbiAgKVxufSlcblxuU2ltcGxlQmFyLnByb3BUeXBlcyA9IHtcbiAgZGF0YTogUFQub2JqZWN0LmlzUmVxdWlyZWRcbn1cblxuLyoqXG4gKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICogU3RhY2tlZEJhckNoYXJ0XG4gKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICovXG5leHBvcnQgY29uc3QgZ2VuZXJhdGVGYWtlU3RhY2tlZEJhckNoYXJ0RGF0YSA9ICgpID0+IHtcbiAgcmV0dXJuIFtcbiAgICBbJ0NhdGVnb3J5JywgJzIwMTUnLCAnMjAxNicsICcyMDE3JywgJzIwMTgnLCAnMjAxOSddLFxuICAgIFsnTWF0Y2hhIExhdHRlJywgNDMuMywgODUuOCwgOTMuNywgMzIuNCwgMTAuMl0sXG4gICAgWydNaWxrIFRlYScsIDgzLjEsIDczLjQsIDU1LjEsIDIzLjQsIDguOF0sXG4gICAgWydDaGVlc2UgQ29jb2EnLCA4Ni40LCA2NS4yLCA4Mi41LCAxNS4zLCAxNS4yXSxcbiAgICBbJ1dhbG51dCBCcm93bmllJywgNzIuNCwgNTMuOSwgMzkuMSwgNDIuMSwgMTMuM11cbiAgXVxufVxuXG5leHBvcnQgY29uc3QgU3RhY2tlZEJhckNoYXJ0ID0gd2l0aFRoZW1lKCh7IGRhdGEsIGhlaWdodCwgLi4ucmVzdCB9KSA9PiB7XG4gIGNvbnN0IG9wdGlvbiA9IHtcbiAgICBsZWdlbmQ6IHt9LFxuICAgIHRvb2x0aXA6IHtcbiAgICAgIHRyaWdnZXI6ICdheGlzJyxcbiAgICAgIGF4aXNQb2ludGVyOiB7XG4gICAgICAgIHR5cGU6ICdzaGFkb3cnXG4gICAgICB9XG4gICAgfSxcbiAgICBncmlkOiB7XG4gICAgICBsZWZ0OiAnMyUnLFxuICAgICAgcmlnaHQ6ICc0JScsXG4gICAgICBib3R0b206ICczJScsXG4gICAgICBjb250YWluTGFiZWw6IHRydWVcbiAgICB9LFxuICAgIGRhdGFzZXQ6IHtcbiAgICAgIHNvdXJjZTogZGF0YVxuICAgIH0sXG4gICAgeEF4aXM6IHsgdHlwZTogJ3ZhbHVlJyB9LFxuICAgIHlBeGlzOiB7IHR5cGU6ICdjYXRlZ29yeScgfSxcbiAgICBzZXJpZXM6XG4gICAgICBkYXRhICYmXG4gICAgICBkYXRhWzBdLm1hcCgoXywgaW5kZXgpID0+IHtcbiAgICAgICAgaWYgKGluZGV4ICE9PSAwKSB7XG4gICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHR5cGU6ICdiYXInLFxuICAgICAgICAgICAgc3RhY2s6ICdzYW1wbGUnLFxuICAgICAgICAgICAgbGFiZWw6IHtcbiAgICAgICAgICAgICAgbm9ybWFsOiB7XG4gICAgICAgICAgICAgICAgc2hvdzogdHJ1ZSxcbiAgICAgICAgICAgICAgICBwb3NpdGlvbjogJ2luc2lkZVJpZ2h0J1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9KVxuICB9XG5cbiAgcmV0dXJuIChcbiAgICA8UmVhY3RFY2hhcnRzXG4gICAgICBvcHRpb249e29wdGlvbn1cbiAgICAgIHN0eWxlPXt7IGhlaWdodDogaGVpZ2h0IHx8ICc0MDBweCcsIHdpZHRoOiAnMTAwJScgfX1cbiAgICAgIHsuLi5yZXN0fVxuICAgIC8+XG4gIClcbn0pXG5cblN0YWNrZWRCYXJDaGFydC5wcm9wVHlwZXMgPSB7XG4gIGNsYXNzTmFtZTogUFQuc3RyaW5nLFxuICBkYXRhOiBQVC5hcnJheS5pc1JlcXVpcmVkLFxuICBoZWlnaHQ6IE51bWJlck9yU3RyaW5nUFRcbn1cblxuU3RhY2tlZEJhckNoYXJ0LmRlZmF1bHRQcm9wcyA9IHtcbiAgaGVpZ2h0OiA0MDBcbn1cblxuZXhwb3J0IGRlZmF1bHQge1xuICBTdGFja2VkQmFyQ2hhcnQsXG4gIFNpbXBsZUJhclxufVxuIl0sIm5hbWVzIjpbIk51bWJlck9yU3RyaW5nUFQiLCJQVCIsIm9uZU9mVHlwZSIsIm51bWJlciIsInN0cmluZyIsImdldFJhbmRvbU51bWJlckluUmFuZ2UiLCJtaW4iLCJtYXgiLCJNYXRoIiwiZmxvb3IiLCJyYW5kb20iLCJjb2xvcnMiLCJwb3BSYW5kb21Db2xvciIsImxlbmd0aCIsImNvbG9ySW5kZXgiLCJtb2RpZnlEYXRhRm9yQ2hhcnQiLCJkYXRhIiwiYWRkQ29sb3IiLCJtb2RpZmllZERhdGEiLCJtYXAiLCJvYmoiLCJpdGVtU3R5bGUiLCJjb2xvciIsInRpdGxlIiwibmFtZSIsImNoaWxkcmVuIiwiY3JlYXRlU3VuYnVyc3RDaGlsZHJlbiIsInJvb3QiLCJsZXZlbCIsImNvdW50IiwiaSIsInB1c2giLCJ2YWx1ZSIsImxhYmVsIiwic2hvdyIsImdlbmVyYXRlRmFrZVN1bmJ1cnN0Q2hhcnREYXRhIiwibGV2ZWxzIiwiU3VuYnVyc3RDaGFydCIsIndpdGhUaGVtZSIsImhlaWdodCIsInJlc3QiLCJvcHRpb24iLCJzZXJpZXMiLCJyYWRpdXMiLCJ0eXBlIiwic29ydCIsImhpZ2hsaWdodFBvbGljeSIsImJvcmRlcldpZHRoIiwidG9vbHRpcCIsImZvcm1hdHRlciIsImluZm8iLCJqb2luIiwiUmVhY3QiLCJ3aWR0aCIsInByb3BUeXBlcyIsImNsYXNzTmFtZSIsImFycmF5IiwiaXNSZXF1aXJlZCIsImRlZmF1bHRQcm9wcyIsImNyZWF0ZUNoaWxkcmVuIiwiZ2VuZXJhdGVGYWtlVHJlZW1hcENoYXJ0RGF0YSIsIlRyZWVtYXBDaGFydCIsImdldExldmVsT3B0aW9uIiwibm9ybWFsIiwiYm9yZGVyQ29sb3IiLCJnYXBXaWR0aCIsInVwcGVyTGFiZWwiLCJlbXBoYXNpcyIsImNvbG9yU2F0dXJhdGlvbiIsImJvcmRlckNvbG9yU2F0dXJhdGlvbiIsInRyZWVQYXRoSW5mbyIsInRyZWVQYXRoIiwidmlzaWJsZU1pbiIsInJvYW0iLCJnZW5lcmF0ZUZha2VTaW1wbGVCYXJEYXRhIiwiU2ltcGxlQmFyIiwibWF4V2lkdGgiLCJtYXhIZWlnaHQiLCJvdmVyZmxvdyIsIm1hcmdpbiIsImNoaWxkIiwid2hpdGVTcGFjZSIsImJhY2tncm91bmQiLCJwYWRkaW5nIiwib2JqZWN0IiwiZ2VuZXJhdGVGYWtlU3RhY2tlZEJhckNoYXJ0RGF0YSIsIlN0YWNrZWRCYXJDaGFydCIsImxlZ2VuZCIsInRyaWdnZXIiLCJheGlzUG9pbnRlciIsImdyaWQiLCJsZWZ0IiwicmlnaHQiLCJib3R0b20iLCJjb250YWluTGFiZWwiLCJkYXRhc2V0Iiwic291cmNlIiwieEF4aXMiLCJ5QXhpcyIsIl8iLCJpbmRleCIsInN0YWNrIiwicG9zaXRpb24iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7QUFRQTs7Ozs7OztBQU1BLElBQU1BLGdCQUFnQixHQUFHQyxrQkFBRSxDQUFDQyxTQUFILENBQWEsQ0FBQ0Qsa0JBQUUsQ0FBQ0UsTUFBSixFQUFZRixrQkFBRSxDQUFDRyxNQUFmLENB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
