import { b as _objectWithoutProperties, _ as _extends } from '../../chunk-d1e6a1ad.js';
import '../../chunk-eda5d4be.js';
import React__default from 'react';
import PT from 'prop-types';
import '@xstyled/styled-components';
import { withTheme } from '../../withTheme/index.js';
import { R as ReactEcharts } from '../../chunk-995584cb.js';

/**
 * ==================================================
 * Common PropTypes
 * Other reference PropTypes: http://uber.github.io/react-vis/documentation/api-reference/xy-plot
 * ==================================================
 */

var NumberOrStringPT = PT.oneOfType([PT.number, PT.string]);
/**
 * ==================================================
 * Common getters/utils
 * ==================================================
 */

var getRandomNumberInRange = function getRandomNumberInRange() {
  var min = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
  var max = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 10;
  return Math.floor(Math.random() * max) + min;
};
/**
 * ==================================================
 * Utility functions for getting random color
 * ==================================================
 */


var colors = ['#30BC9D', '#FF9552', '#5099DE', '#EE6352', '#68CEB7', '#FFA871', '#7FB4E7', '#F28D81', '#338472', '#D17A44', '#33628E', '#A04438', '#30BC9D', '#FF9552', '#5099DE', '#EE6352', '#68CEB7', '#FFA871', '#7FB4E7', '#F28D81', '#338472', '#D17A44', '#33628E', '#A04438'];

var popRandomColor = function popRandomColor() {
  return colors[Math.floor(Math.random() * colors.length)];
};
/**
 * ==================================================
 * Sunburst
 * ==================================================
 */


var createSunburstChildren = function createSunburstChildren(root, level) {
  var data = [];
  var count = getRandomNumberInRange(1, 3);

  for (var i = 1; i < count; i++) {
    data.push({
      name: "Node".concat(i),
      value: getRandomNumberInRange(1, 5),
      children: level === 0 ? [] : createSunburstChildren("".concat(root, ".").concat(i), level - 1),
      itemStyle: {
        color: popRandomColor()
      },
      label: {
        show: false
      }
    });
  }

  return data;
};

var generateFakeSunburstChartData = function generateFakeSunburstChartData() {
  var levels = getRandomNumberInRange(2, 4);
  var data = [];

  for (var i = 1; i < levels; i++) {
    data.push({
      name: "Node".concat(i),
      value: getRandomNumberInRange(1, 5),
      children: createSunburstChildren(i, levels),
      itemStyle: {
        color: popRandomColor()
      },
      label: {
        show: false
      }
    });
  }

  return data;
};
var SunburstChart = withTheme(function (_ref) {
  var data = _ref.data,
      height = _ref.height,
      rest = _objectWithoutProperties(_ref, ["data", "height"]);

  var option = {
    series: {
      radius: ['15%', '80%'],
      type: 'sunburst',
      sort: null,
      highlightPolicy: 'ancestor',
      data: data,
      label: {
        rotate: 'radial'
      },
      levels: [],
      itemStyle: {
        color: '#ddd',
        borderWidth: 2
      }
    },
    tooltip: {
      formatter: function formatter(info) {
        return ['<div class="tooltip-title">' + info.data.name + ' : ' + info.data.value + '</div>'].join('');
      }
    }
  };
  return React__default.createElement(ReactEcharts, _extends({
    option: option,
    style: {
      height: height ? height : '400px',
      width: '100%'
    }
  }, rest));
});
SunburstChart.propTypes = {
  className: PT.string,
  data: PT.array.isRequired,
  height: NumberOrStringPT,
  width: NumberOrStringPT
};
SunburstChart.defaultProps = {
  height: 400
};

export default SunburstChart;
export { SunburstChart, generateFakeSunburstChartData };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
