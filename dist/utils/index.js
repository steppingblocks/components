/**
 * ==================================================
 * Common getters/utils
 * ==================================================
 */
var getRandomNumberInRange = function getRandomNumberInRange() {
  var min = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
  var max = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 10;
  return Math.floor(Math.random() * max) + min;
};
/**
 * ==================================================
 * Utility functions for getting random color
 * ==================================================
 */

var colors = ['#30BC9D', '#FF9552', '#5099DE', '#EE6352', '#68CEB7', '#FFA871', '#7FB4E7', '#F28D81', '#338472', '#D17A44', '#33628E', '#A04438', '#30BC9D', '#FF9552', '#5099DE', '#EE6352', '#68CEB7', '#FFA871', '#7FB4E7', '#F28D81', '#338472', '#D17A44', '#33628E', '#A04438'];
var popRandomColor = function popRandomColor() {
  return colors[Math.floor(Math.random() * colors.length)];
};
var colorIndex = 0;
var modifyDataForChart = function modifyDataForChart(data, addColor) {
  if (data && !!data.length) {
    var modifiedData = data.map(function (obj) {
      if (addColor) {
        obj.itemStyle = {
          color: colors[colorIndex++]
        };
        if (colorIndex >= colors.length) colorIndex = 0;
      }

      if (obj.title) {
        obj.name = obj.title;
        delete obj.title;
      }

      if (obj.children && !!obj.children.length) {
        obj.children = modifyDataForChart(obj.children, addColor);
      }

      return obj;
    });
    return modifiedData;
  } else {
    return data;
  }
};

export { colors, getRandomNumberInRange, modifyDataForChart, popRandomColor };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlscy9pbmRleC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gKiBDb21tb24gZ2V0dGVycy91dGlsc1xuICogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAqL1xuZXhwb3J0IGNvbnN0IGdldFJhbmRvbU51bWJlckluUmFuZ2UgPSAobWluID0gMCwgbWF4ID0gMTApID0+XG4gIE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIG1heCkgKyBtaW5cblxuLyoqXG4gKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICogVXRpbGl0eSBmdW5jdGlvbnMgZm9yIGdldHRpbmcgcmFuZG9tIGNvbG9yXG4gKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICovXG5leHBvcnQgY29uc3QgY29sb3JzID0gW1xuICAnIzMwQkM5RCcsXG4gICcjRkY5NTUyJyxcbiAgJyM1MDk5REUnLFxuICAnI0VFNjM1MicsXG4gICcjNjhDRUI3JyxcbiAgJyNGRkE4NzEnLFxuICAnIzdGQjRFNycsXG4gICcjRjI4RDgxJyxcbiAgJyMzMzg0NzInLFxuICAnI0QxN0E0NCcsXG4gICcjMzM2MjhFJyxcbiAgJyNBMDQ0MzgnLFxuICAnIzMwQkM5RCcsXG4gICcjRkY5NTUyJyxcbiAgJyM1MDk5REUnLFxuICAnI0VFNjM1MicsXG4gICcjNjhDRUI3JyxcbiAgJyNGRkE4NzEnLFxuICAnIzdGQjRFNycsXG4gICcjRjI4RDgxJyxcbiAgJyMzMzg0NzInLFxuICAnI0QxN0E0NCcsXG4gICcjMzM2MjhFJyxcbiAgJyNBMDQ0MzgnXG5dXG5leHBvcnQgY29uc3QgcG9wUmFuZG9tQ29sb3IgPSAoKSA9PlxuICBjb2xvcnNbTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogY29sb3JzLmxlbmd0aCldXG5sZXQgY29sb3JJbmRleCA9IDBcblxuZXhwb3J0IGNvbnN0IG1vZGlmeURhdGFGb3JDaGFydCA9IChkYXRhLCBhZGRDb2xvcikgPT4ge1xuICBpZiAoZGF0YSAmJiAhIWRhdGEubGVuZ3RoKSB7XG4gICAgY29uc3QgbW9kaWZpZWREYXRhID0gZGF0YS5tYXAob2JqID0+IHtcbiAgICAgIGlmIChhZGRDb2xvcikge1xuICAgICAgICBvYmouaXRlbVN0eWxlID0geyBjb2xvcjogY29sb3JzW2NvbG9ySW5kZXgrK10gfVxuICAgICAgICBpZiAoY29sb3JJbmRleCA+PSBjb2xvcnMubGVuZ3RoKSBjb2xvckluZGV4ID0gMFxuICAgICAgfVxuICAgICAgaWYgKG9iai50aXRsZSkge1xuICAgICAgICBvYmoubmFtZSA9IG9iai50aXRsZVxuICAgICAgICBkZWxldGUgb2JqLnRpdGxlXG4gICAgICB9XG4gICAgICBpZiAob2JqLmNoaWxkcmVuICYmICEhb2JqLmNoaWxkcmVuLmxlbmd0aCkge1xuICAgICAgICBvYmouY2hpbGRyZW4gPSBtb2RpZnlEYXRhRm9yQ2hhcnQob2JqLmNoaWxkcmVuLCBhZGRDb2xvcilcbiAgICAgIH1cbiAgICAgIHJldHVybiBvYmpcbiAgICB9KVxuXG4gICAgcmV0dXJuIG1vZGlmaWVkRGF0YVxuICB9IGVsc2Uge1xuICAgIHJldHVybiBkYXRhXG4gIH1cbn1cbiJdLCJuYW1lcyI6WyJnZXRSYW5kb21OdW1iZXJJblJhbmdlIiwibWluIiwibWF4IiwiTWF0aCIsImZsb29yIiwicmFuZG9tIiwiY29sb3JzIiwicG9wUmFuZG9tQ29sb3IiLCJsZW5ndGgiLCJjb2xvckluZGV4IiwibW9kaWZ5RGF0YUZvckNoYXJ0IiwiZGF0YSIsImFkZENvbG9yIiwibW9kaWZpZWREYXRhIiwibWFwIiwib2JqIiwiaXRlbVN0eWxlIiwiY29sb3IiLCJ0aXRsZSIsIm5hbWUiLCJjaGlsZHJlbiJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7O0FBS0EsSUFBYUEsc0JBQXNCLEdBQUcsU0FBekJBLHNCQUF5QjtNQUFDQyxHQUFELHVFQUFPLENBQVA7TUFBVUMsR0FBVix1RUFBZ0IsRUFBaEI7U0FDcENDLElBQUksQ0FBQ0MsS0FBTCxDQUFXRCxJQUFJLENBQUNFLE1BQUwsS0FBZ0JILEdBQTNCLElBQWtDRCxHQURFO0NBQS9COzs7Ozs7O0FBUVAsSUFBYUssTUFBTSxHQUFHLENBQ3BCLFNBRG9CLEVBRXBCLFNBRm9CLEVBR3BCLFNBSG9CLEVBSXBCLFNBSm9CLEVBS3BCLFNBTG9CLEVBTXBCLFNBTm9CLEVBT3BCLFNBUG9CLEVBUXBCLFNBUm9CLEVBU3BCLFNBVG9CLEVBVXBCLFNBVm9CLEVBV3BCLFNBWG9CLEVBWXBCLFNBWm9CLEVBYXBCLFNBYm9CLEVBY3BCLFNBZG9CLEVBZXBCLFNBZm9CLEVBZ0JwQixTQWhCb0IsRUFpQnBCLFNBakJvQixFQWtCcEIsU0FsQm9CLEVBbUJwQixTQW5Cb0IsRUFvQnBCLFNBcEJvQixFQXFCcEIsU0FyQm9CLEVBc0JwQixTQXRCb0IsRUF1QnBCLFNBdkJvQixFQXdCcEIsU0F4Qm9CLENBQWY7QUEwQlAsSUFBYUMsY0FBYyxHQUFHLFNBQWpCQSxjQUFpQjtTQUM1QkQsTUFBTSxDQUFDSCxJQUFJLENBQUNDLEtBQUwsQ0FBV0QsSUFBSSxDQUFDRSxNQUFMLEtBQWdCQyxNQUFNLENBQUNFLE1BQWxDLENBQUQsQ0FEc0I7Q0FBdkI7QUFFUCxJQUFJQyxVQUFVLEdBQUcsQ0FBakI7QUFFQSxJQUFhQyxrQkFBa0IsR0FBRyxTQUFyQkEsa0JBQXFCLENBQUNDLElBQUQsRUFBT0MsUUFBUCxFQUFvQjtNQUNoREQsSUFBSSxJQUFJLENBQUMsQ0FBQ0EsSUFBSSxDQUFDSCxNQUFuQixFQUEyQjtRQUNuQkssWUFBWSxHQUFHRixJQUFJLENBQUNHLEdBQUwsQ0FBUyxVQUFBQyxHQUFHLEVBQUk7VUFDL0JILFFBQUosRUFBYztRQUNaRyxHQUFHLENBQUNDLFNBQUosR0FBZ0I7VUFBRUMsS0FBSyxFQUFFWCxNQUFNLENBQUNHLFVBQVUsRUFBWDtTQUEvQjtZQUNJQSxVQUFVLElBQUlILE1BQU0sQ0FBQ0UsTUFBekIsRUFBaUNDLFVBQVUsR0FBRyxDQUFiOzs7VUFFL0JNLEdBQUcsQ0FBQ0csS0FBUixFQUFlO1FBQ2JILEdBQUcsQ0FBQ0ksSUFBSixHQUFXSixHQUFHLENBQUNHLEtBQWY7ZUFDT0gsR0FBRyxDQUFDRyxLQUFYOzs7VUFFRUgsR0FBRyxDQUFDSyxRQUFKLElBQWdCLENBQUMsQ0FBQ0wsR0FBRyxDQUFDSyxRQUFKLENBQWFaLE1BQW5DLEVBQTJDO1FBQ3pDTyxHQUFHLENBQUNLLFFBQUosR0FBZVYsa0JBQWtCLENBQUNLLEdBQUcsQ0FBQ0ssUUFBTCxFQUFlUixRQUFmLENBQWpDOzs7YUFFS0csR0FBUDtLQVptQixDQUFyQjtXQWVPRixZQUFQO0dBaEJGLE1BaUJPO1dBQ0VGLElBQVA7O0NBbkJHOzs7OyJ9
