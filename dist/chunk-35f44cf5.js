import { a as _objectSpread } from './chunk-d1e6a1ad.js';
import PT from 'prop-types';

var AlignPT = PT.oneOf(['top', 'middle', 'bottom']);
var SizePT = PT.oneOf(['default', 'large', 'small']);
var StringOrNodePT = PT.oneOfType([PT.string, PT.node]);
var StringOrNumberPT = PT.oneOfType([PT.number, PT.string]);
var ButtonProps = {
  disabled: PT.bool,
  ghost: PT.bool,
  href: PT.string,

  /** Button type via HTML */
  htmlType: PT.string,
  icon: PT.string,
  loading: PT.bool,
  shape: PT.oneOf(['circle', 'round']),
  size: SizePT,
  target: PT.string,
  type: PT.oneOf(['primary', 'ghost', 'dashed', 'danger', 'link']),
  onClick: PT.func,
  block: PT.bool
};
var ButtonPropsPT = PT.shape(ButtonProps);
var InputProps = {
  addonAfter: StringOrNodePT,
  addonBefore: StringOrNodePT,
  defaultValue: PT.string,
  disabled: PT.bool,
  id: PT.string,
  prefix: StringOrNodePT,
  size: SizePT,
  suffix: StringOrNodePT,
  type: PT.string,
  value: PT.string,
  onChange: PT.func,
  onPressEnter: PT.func,
  allowClear: PT.bool
};
var InputPT = PT.shape(_objectSpread({}, InputProps));
var JustifyPT = PT.oneOf(['start', 'end', 'center', 'space-around', 'space-between']);
var SpacingPT = PT.shape({
  xs: PT.number,
  sm: PT.number,
  md: PT.number,
  lg: PT.number
});
var RowPT = PT.shape({
  align: AlignPT,
  gutter: SpacingPT,
  justify: JustifyPT,
  type: PT.string
});

export { ButtonPropsPT as B, InputProps as I, RowPT as R, StringOrNodePT as S, StringOrNumberPT as a, ButtonProps as b };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2h1bmstMzVmNDRjZjUuanMiLCJzb3VyY2VzIjpbIi4uL3NyYy9wcm9wdHlwZXMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFBUIGZyb20gJ3Byb3AtdHlwZXMnXG5cbmNvbnN0IEFsaWduUFQgPSBQVC5vbmVPZihbJ3RvcCcsICdtaWRkbGUnLCAnYm90dG9tJ10pXG5jb25zdCBTaXplUFQgPSBQVC5vbmVPZihbJ2RlZmF1bHQnLCAnbGFyZ2UnLCAnc21hbGwnXSlcbmV4cG9ydCBjb25zdCBTdHJpbmdPck5vZGVQVCA9IFBULm9uZU9mVHlwZShbUFQuc3RyaW5nLCBQVC5ub2RlXSlcbmV4cG9ydCBjb25zdCBTdHJpbmdPck51bWJlclBUID0gUFQub25lT2ZUeXBlKFtQVC5udW1iZXIsIFBULnN0cmluZ10pXG5cbmV4cG9ydCBjb25zdCBCdXR0b25Qcm9wcyA9IHtcbiAgZGlzYWJsZWQ6IFBULmJvb2wsXG4gIGdob3N0OiBQVC5ib29sLFxuICBocmVmOiBQVC5zdHJpbmcsXG4gIC8qKiBCdXR0b24gdHlwZSB2aWEgSFRNTCAqL1xuICBodG1sVHlwZTogUFQuc3RyaW5nLFxuICBpY29uOiBQVC5zdHJpbmcsXG4gIGxvYWRpbmc6IFBULmJvb2wsXG4gIHNoYXBlOiBQVC5vbmVPZihbJ2NpcmNsZScsICdyb3VuZCddKSxcbiAgc2l6ZTogU2l6ZVBULFxuICB0YXJnZXQ6IFBULnN0cmluZyxcbiAgdHlwZTogUFQub25lT2YoWydwcmltYXJ5JywgJ2dob3N0JywgJ2Rhc2hlZCcsICdkYW5nZXInLCAnbGluayddKSxcbiAgb25DbGljazogUFQuZnVuYyxcbiAgYmxvY2s6IFBULmJvb2xcbn1cblxuZXhwb3J0IGNvbnN0IEJ1dHRvblByb3BzUFQgPSBQVC5zaGFwZShCdXR0b25Qcm9wcylcblxuZXhwb3J0IGNvbnN0IElucHV0UHJvcHMgPSB7XG4gIGFkZG9uQWZ0ZXI6IFN0cmluZ09yTm9kZVBULFxuICBhZGRvbkJlZm9yZTogU3RyaW5nT3JOb2RlUFQsXG4gIGRlZmF1bHRWYWx1ZTogUFQuc3RyaW5nLFxuICBkaXNhYmxlZDogUFQuYm9vbCxcbiAgaWQ6IFBULnN0cmluZyxcbiAgcHJlZml4OiBTdHJpbmdPck5vZGVQVCxcbiAgc2l6ZTogU2l6ZVBULFxuICBzdWZmaXg6IFN0cmluZ09yTm9kZVBULFxuICB0eXBlOiBQVC5zdHJpbmcsXG4gIHZhbHVlOiBQVC5zdHJpbmcsXG4gIG9uQ2hhbmdlOiBQVC5mdW5jLFxuICBvblByZXNzRW50ZXI6IFBULmZ1bmMsXG4gIGFsbG93Q2xlYXI6IFBULmJvb2xcbn1cblxuZXhwb3J0IGNvbnN0IElucHV0UFQgPSBQVC5zaGFwZSh7XG4gIC4uLklucHV0UHJvcHNcbn0pXG5cbmNvbnN0IEp1c3RpZnlQVCA9IFBULm9uZU9mKFtcbiAgJ3N0YXJ0JyxcbiAgJ2VuZCcsXG4gICdjZW50ZXInLFxuICAnc3BhY2UtYXJvdW5kJyxcbiAgJ3NwYWNlLWJldHdlZW4nXG5dKVxuXG5leHBvcnQgY29uc3QgU3BhY2luZ1BUID0gUFQuc2hhcGUoe1xuICB4czogUFQubnVtYmVyLFxuICBzbTogUFQubnVtYmVyLFxuICBtZDogUFQubnVtYmVyLFxuICBsZzogUFQubnVtYmVyXG59KVxuXG5leHBvcnQgY29uc3QgUm93UFQgPSBQVC5zaGFwZSh7XG4gIGFsaWduOiBBbGlnblBULFxuICBndXR0ZXI6IFNwYWNpbmdQVCxcbiAganVzdGlmeTogSnVzdGlmeVBULFxuICB0eXBlOiBQVC5zdHJpbmdcbn0pXG4iXSwibmFtZXMiOlsiQWxpZ25QVCIsIlBUIiwib25lT2YiLCJTaXplUFQiLCJTdHJpbmdPck5vZGVQVCIsIm9uZU9mVHlwZSIsInN0cmluZyIsIm5vZGUiLCJTdHJpbmdPck51bWJlclBUIiwibnVtYmVyIiwiQnV0dG9uUHJvcHMiLCJkaXNhYmxlZCIsImJvb2wiLCJnaG9zdCIsImhyZWYiLCJodG1sVHlwZSIsImljb24iLCJsb2FkaW5nIiwic2hhcGUiLCJzaXplIiwidGFyZ2V0IiwidHlwZSIsIm9uQ2xpY2siLCJmdW5jIiwiYmxvY2siLCJCdXR0b25Qcm9wc1BUIiwiSW5wdXRQcm9wcyIsImFkZG9uQWZ0ZXIiLCJhZGRvbkJlZm9yZSIsImRlZmF1bHRWYWx1ZSIsImlkIiwicHJlZml4Iiwic3VmZml4IiwidmFsdWUiLCJvbkNoYW5nZSIsIm9uUHJlc3NFbnRlciIsImFsbG93Q2xlYXIiLCJJbnB1dFBUIiwiSnVzdGlmeVBUIiwiU3BhY2luZ1BUIiwieHMiLCJzbSIsIm1kIiwibGciLCJSb3dQVCIsImFsaWduIiwiZ3V0dGVyIiwianVzdGlmeSJdLCJtYXBwaW5ncyI6Ijs7O0FBRUEsSUFBTUEsT0FBTyxHQUFHQyxFQUFFLENBQUNDLEtBQUgsQ0FBUyxDQUFDLEtBQUQsRUFBUSxRQUFSLEVBQWtCLFFBQWxCLENBQVQsQ0FBaEI7QUFDQSxJQUFNQyxNQUFNLEdBQUdGLEVBQUUsQ0FBQ0MsS0FBSCxDQUFTLENBQUMsU0FBRCxFQUFZLE9BQVosRUFBcUIsT0FBckIsQ0FBVCxDQUFmO0FBQ0EsSUFBYUUsY0FBYyxHQUFHSCxFQUFFLENBQUNJLFNBQUgsQ0FBYSxDQUFDSixFQUFFLENBQUNLLE1BQUosRUFBWUwsRUFBRSxDQUFDTSxJQUFmLENBQWIsQ0FBdkI7QUFDUCxJQUFhQyxnQkFBZ0IsR0FBR1AsRUFBRSxDQUFDSSxTQUFILENBQWEsQ0FBQ0osRUFBRSxDQUFDUSxNQUFKLEVBQVlSLEVBQUUsQ0FBQ0ssTUFBZixDQUFiLENBQXpCO0FBRVAsSUFBYUksV0FBVyxHQUFHO0VBQ3pCQyxRQUFRLEVBQUVWLEVBQUUsQ0FBQ1csSUFEWTtFQUV6QkMsS0FBSyxFQUFFWixFQUFFLENBQUNXLElBRmU7RUFHekJFLElBQUksRUFBRWIsRUFBRSxDQUFDSyxNQUhnQjs7O0VBS3pCUyxRQUFRLEVBQUVkLEVBQUUsQ0FBQ0ssTUFMWTtFQU16QlUsSUFBSSxFQUFFZixFQUFFLENBQUNLLE1BTmdCO0VBT3pCVyxPQUFPLEVBQUVoQixFQUFFLENBQUNXLElBUGE7RUFRekJNLEtBQUssRUFBRWpCLEVBQUUsQ0FBQ0MsS0FBSCxDQUFTLENBQUMsUUFBRCxFQUFXLE9BQVgsQ0FBVCxDQVJrQjtFQVN6QmlCLElBQUksRUFBRWhCLE1BVG1CO0VBVXpCaUIsTUFBTSxFQUFFbkIsRUFBRSxDQUFDSyxNQVZjO0VBV3pCZSxJQUFJLEVBQUVwQixFQUFFLENBQUNDLEtBQUgsQ0FBUyxDQUFDLFNBQUQsRUFBWSxPQUFaLEVBQXFCLFFBQXJCLEVBQStCLFFBQS9CLEVBQXlDLE1BQXpDLENBQVQsQ0FYbUI7RUFZekJvQixPQUFPLEVBQUVyQixFQUFFLENBQUNzQixJQVphO0VBYXpCQyxLQUFLLEVBQUV2QixFQUFFLENBQUNXO0NBYkw7QUFnQlAsSUFBYWEsYUFBYSxHQUFHeEIsRUFBRSxDQUFDaUIsS0FBSCxDQUFTUixXQUFULENBQXRCO0FBRVAsSUFBYWdCLFVBQVUsR0FBRztFQUN4QkMsVUFBVSxFQUFFdkIsY0FEWTtFQUV4QndCLFdBQVcsRUFBRXhCLGNBRlc7RUFHeEJ5QixZQUFZLEVBQUU1QixFQUFFLENBQUNLLE1BSE87RUFJeEJLLFFBQVEsRUFBRVYsRUFBRSxDQUFDVyxJQUpXO0VBS3hCa0IsRUFBRSxFQUFFN0IsRUFBRSxDQUFDSyxNQUxpQjtFQU14QnlCLE1BQU0sRUFBRTNCLGNBTmdCO0VBT3hCZSxJQUFJLEVBQUVoQixNQVBrQjtFQVF4QjZCLE1BQU0sRUFBRTVCLGNBUmdCO0VBU3hCaUIsSUFBSSxFQUFFcEIsRUFBRSxDQUFDSyxNQVRlO0VBVXhCMkIsS0FBSyxFQUFFaEMsRUFBRSxDQUFDSyxNQVZjO0VBV3hCNEIsUUFBUSxFQUFFakMsRUFBRSxDQUFDc0IsSUFYVztFQVl4QlksWUFBWSxFQUFFbEMsRUFBRSxDQUFDc0IsSUFaTztFQWF4QmEsVUFBVSxFQUFFbkMsRUFBRSxDQUFDVztDQWJWO0FBZ0JQLEFBQU8sSUFBTXlCLE9BQU8sR0FBR3BDLEVBQUUsQ0FBQ2lCLEtBQUgsbUJBQ2xCUSxVQURrQixFQUFoQjtBQUlQLElBQU1ZLFNBQVMsR0FBR3JDLEVBQUUsQ0FBQ0MsS0FBSCxDQUFTLENBQ3pCLE9BRHlCLEVBRXpCLEtBRnlCLEVBR3pCLFFBSHlCLEVBSXpCLGNBSnlCLEVBS3pCLGVBTHlCLENBQVQsQ0FBbEI7QUFRQSxBQUFPLElBQU1xQyxTQUFTLEdBQUd0QyxFQUFFLENBQUNpQixLQUFILENBQVM7RUFDaENzQixFQUFFLEVBQUV2QyxFQUFFLENBQUNRLE1BRHlCO0VBRWhDZ0MsRUFBRSxFQUFFeEMsRUFBRSxDQUFDUSxNQUZ5QjtFQUdoQ2lDLEVBQUUsRUFBRXpDLEVBQUUsQ0FBQ1EsTUFIeUI7RUFJaENrQyxFQUFFLEVBQUUxQyxFQUFFLENBQUNRO0NBSmdCLENBQWxCO0FBT1AsSUFBYW1DLEtBQUssR0FBRzNDLEVBQUUsQ0FBQ2lCLEtBQUgsQ0FBUztFQUM1QjJCLEtBQUssRUFBRTdDLE9BRHFCO0VBRTVCOEMsTUFBTSxFQUFFUCxTQUZvQjtFQUc1QlEsT0FBTyxFQUFFVCxTQUhtQjtFQUk1QmpCLElBQUksRUFBRXBCLEVBQUUsQ0FBQ0s7Q0FKVSxDQUFkOzs7OyJ9
